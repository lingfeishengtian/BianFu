; ModuleID = 'main'
source_filename = "main"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define void @main() {
entrypoint:
  %0 = alloca i8
  store i8 106, i8* %0
  %1 = load i8, i8* %0
  %2 = alloca [4 x i64]
  %3 = getelementptr inbounds [4 x i64], [4 x i64]* %2, i8 0, i8 0
  store i64 72, i64* %3
  %4 = getelementptr inbounds [4 x i64], [4 x i64]* %2, i8 0, i8 1
  store i64 80, i64* %4
  %5 = getelementptr inbounds [4 x i64], [4 x i64]* %2, i8 0, i8 2
  %6 = zext i8 %1 to i64
  store i64 %6, i64* %5
  %7 = getelementptr inbounds [4 x i64], [4 x i64]* %2, i8 0, i8 3
  store i64 2, i64* %7
  %8 = alloca double
  store double 3.420000e+01, double* %8
  %9 = alloca i64
  store i64 4, i64* %9
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), double 7.100000e+00)
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), [4 x i64]* %2)
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)