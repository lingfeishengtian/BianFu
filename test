; ModuleID = 'main'
source_filename = "main"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@2 = private unnamed_addr constant [3 x i8] c"%f\00", align 1
@3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

define void @main() {
entrypoint:
  %0 = alloca i8
  store i8 106, i8* %0
  %1 = alloca [3 x i8]
  %2 = getelementptr inbounds [3 x i8], [3 x i8]* %1, i8 0, i8 0
  store i8 72, i8* %2
  %3 = getelementptr inbounds [3 x i8], [3 x i8]* %1, i8 0, i8 1
  store i8 80, i8* %3
  %4 = getelementptr inbounds [3 x i8], [3 x i8]* %1, i8 0, i8 2
  store i8 106, i8* %4
  %5 = alloca double
  store double 3.420000e+01, double* %5
  %6 = alloca i64
  store i64 4, i64* %6
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @2, i32 0, i32 0), double 7.100000e+00)
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %9 = addrspacecast [3 x i8]* %1 to [4 x i8]*
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %9, i8 0, i8 3
  store i8 0, i8* %10
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0), [4 x i8]* %9)
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)